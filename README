Building and using Slap
=======================

On all systems Slap needs Python 2.5 (or better) and a C compiler to build and run. 
Once Slap is built (see below):
1. Place all media files under the 'media' directory in the Slap directory
2. Execute slap.py

Slap is built with a Python script called build.py. It is written such that errors are Python exceptions. If you encounter an exception when running build.py, then the build failed and it's probably not a bug in the script.

The build script will attempt to locate an existing mpg123 binary in your search path (under the assumption that it is more likely to work on your system). If it finds the binary it will copy it instead of compiling a new one.

Running Slap on multiple operating systems
==========================================

As noted, Slap requires Python on the host system. It also requires an mpg123 binary on the USB stick. Slap is designed so that multiple binaries for different OSs can exist on the USB stick at once. Currently, build.py will place the binary generated for the OS it was run on. To support more systems, build Slap on the system you want support for and copy the generated mpg123 binary (placed in the 'player' directory) to the 'player' directory on your USB stick. At some point in the future build.py may be extended and also placed on the USB stick (along with mpg123 source) to allow you to build new binaries on any new system you encounter.

Building Slap on *nix
=====================

Gcc is required to build mpg123. In the Slap directory execute build.py. If all goes well, the 'build' directory should now contain a fully formed Slap setup that you can run and copy to your USB stick.

Building Slap on Windows
========================

Building Slap on Windows requires:

1. SWIG 1.3.31 or better (http://www.swig.org)
2. Microsoft Visual C++ Express or better (http://msdn.microsoft.com/vstudio/express/visualc/)
3. Microsoft Platform SDK (http://www.microsoft.com)

Once the above are installed, you need to set a few environment variables:

1. PYTHON_INCLUDE (e.g. c:\python25\Include)
2. PYTHON_LIB (e.g. c:\python25\libs\python25.lib)
3. SWIG_BIN (e.g. c:\Program Files\swigwin-1.3.31)

You also need to have a properly setup Visual Studio environment. The easiest way to do this is to use the Visual Studio command prompt (e.g. Start menu->All Programs->Visual C++ Studio Express Edition->Visual Studio Tools->Visual Studio 2005 Command Prompt). In the command prompt cd to the Slap directory and execute build.py.

If all goes well, the build 'directory' should now contain a fully formed Slap setup that you can run and copy to your USB stick.

Windows build notes
===================

mpg123 will compile with ~720 warnings on Windows - that's a lot of warnings. Fixing all these warnings would probably require extensive changes in the mpg123 code itself. I've tried to keep changes here to a minimum. 

SWIG also appears to raise a couple warnings in its generated code.

Miscellaneous
=============

Slap is built out of various bits and pieces:

mpg123 (http://mpg123.de) - to play mp3 (version 0.66)
mutagen (http://www.sacredchao.net/quodlibet) - to parse media meta-information
Python (http://www.python.org) - some Python curses script used in the Windows curses emulation (wcurses)
